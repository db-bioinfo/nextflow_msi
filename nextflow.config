/*
========================================================================================
    MSI Analysis Pipeline Configuration
========================================================================================
    Default configuration options for the MSI analysis pipeline.
*/

// Global default params, used in configs
params {
    // Input/output options
    fastqDir = "$projectDir/data"
    outdir = "$projectDir/results"
    
    // Reference paths
    bwaIndex = "/home/administrator/lifecode/genomes/bwa_hg38"
    refGenome = "/home/administrator/lifecode/genomes/bwa_hg38/hg38.fa"
    cgpMsisensorpro = "/home/administrator/lifecode/genomes/msi/sensorPRO_hg38/CGP/sensorPRO_microsatellites_targeted"
    cgp60Msisensorpro = "/home/administrator/lifecode/genomes/msi/sensorPRO_hg38/CGP_60/sensorPRO_microsatellites_targeted_CGP60"
    
    // Python scripts location
    python_dir = "$projectDir/bin"
    lcmsian_script = "${python_dir}/lcmsian.py"
    lcmsipdf_script = "${python_dir}/lcmsipdf.py"
    lcmsirep_script = "${python_dir}/lcmsirep.py"
    
    // Clinical thresholds
    minMappingQuality = 30
    minCoverage = 100
    threads = 32
    
    // Publish directory mode
    publish_dir_mode = 'copy'
    
    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory = 128.GB
    max_cpus = 32
    max_time = 240.h
}

// Process-specific resource configuration
process {
    // Default for all processes
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
    
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'
    
    // Process-specific resources
    withName: ALIGNMENT {
        cpus = { check_max( params.threads, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    withName: MARK_DUPLICATES {
        cpus = 8
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    }
    
    withName: RUN_MSISENSOR {
        cpus = { check_max( params.threads, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    }
}

// Executor
executor {
    $local {
        cpus = params.max_cpus
        memory = params.max_memory
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Manifest
manifest {
    name = 'MSI Analysis Pipeline'
    author = '[Your Name]'
    description = 'Nextflow pipeline for Microsatellite Instability (MSI) analysis'
    version = '1.0.0'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.10.0'
}

// Profiles configuration
profiles {
    standard {
        process.executor = 'local'
    }
    
    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
        
        process {
            withName: ALIGNMENT {
                container = 'quay.io/biocontainers/bwa:0.7.17--hed695b0_7'
            }
            withName: MARK_DUPLICATES {
                container = 'quay.io/biocontainers/gatk4:4.2.0.0--0'
            }
            withName: CALCULATE_COVERAGE {
                container = 'quay.io/biocontainers/samtools:1.13--h8c37831_0'
            }
            withName: RUN_MSISENSOR {
                container = 'quay.io/biocontainers/msisensor-pro:1.1.a--h87f3376_0'
            }
            withName: MSI_ANALYSIS {
                container = 'python:3.9'
            }
            withName: GENERATE_PDF {
                container = 'python:3.9'
            }
            withName: GENERATE_HTML {
                container = 'python:3.9'
            }
        }
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        
        process {
            withName: ALIGNMENT {
                container = 'docker://quay.io/biocontainers/bwa:0.7.17--hed695b0_7'
            }
            withName: MARK_DUPLICATES {
                container = 'docker://quay.io/biocontainers/gatk4:4.2.0.0--0'
            }
            withName: CALCULATE_COVERAGE {
                container = 'docker://quay.io/biocontainers/samtools:1.13--h8c37831_0'
            }
            withName: RUN_MSISENSOR {
                container = 'docker://quay.io/biocontainers/msisensor-pro:1.1.a--h87f3376_0'
            }
            withName: MSI_ANALYSIS {
                container = 'docker://python:3.9'
            }
            withName: GENERATE_PDF {
                container = 'docker://python:3.9'
            }
            withName: GENERATE_HTML {
                container = 'docker://python:3.9'
            }
        }
    }
}
