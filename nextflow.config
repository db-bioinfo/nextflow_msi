// nextflow.config - Main configuration for MSI Analysis Pipeline

// Default parameters
params {
    // Input and output
    fastq_dir = "."
    outdir = "./results"
    
    // Reference paths
    bwa_index = "/home/administrator/lifecode/genomes/bwa_hg38"
    ref_genome = "/home/administrator/lifecode/genomes/bwa_hg38/hg38.fa"
    cgp_msisensorpro = "/home/administrator/lifecode/genomes/msi/sensorPRO_hg38/CGP/sensorPRO_microsatellites_targeted"
    cgp60_msisensorpro = "/home/administrator/lifecode/genomes/msi/sensorPRO_hg38/CGP_60/sensorPRO_microsatellites_targeted_CGP60"
    
    // Script paths - relative to pipeline base directory
    lcmsian_script = "$baseDir/bin/lcmsian.py"
    lcmsipdf_script = "$baseDir/bin/lcmsipdf.py"
    lcmsirep_script = "$baseDir/bin/lcmsirep.py"
    
    // Clinical thresholds
    min_mapping_quality = 30
    min_coverage = 100
    
    // Compute resources
    threads = 32
    max_memory = '64.GB'
    max_cpus = 32
    max_time = '24.h'
}

// Process configuration
process {
    executor = 'local'
    
    // Default resources
    cpus = { check_max(1 * task.attempt, 'cpus') }
    memory = { check_max(4.GB * task.attempt, 'memory') }
    time = { check_max(2.h * task.attempt, 'time') }
    
    // Process-specific resources
    withName: 'bwa_align' {
        cpus = { check_max(params.threads, 'cpus') }
        memory = { check_max(16.GB * task.attempt, 'memory') }
    }
    withName: 'samtools_process' {
        cpus = { check_max(16, 'cpus') }
        memory = { check_max(8.GB * task.attempt, 'memory') }
    }
    withName: 'mark_duplicates' {
        cpus = 16
        memory = { check_max(32.GB * task.attempt, 'memory') }
    }
    withName: 'run_msisensor' {
        cpus = { check_max(params.threads, 'cpus') }
        memory = { check_max(16.GB * task.attempt, 'memory') }
    }
    withName: 'calculate_coverage' {
        cpus = 8
        memory = { check_max(4.GB * task.attempt, 'memory') }
    }
    withName: 'calculate_ms_coverage' {
        cpus = 8
        memory = { check_max(8.GB * task.attempt, 'memory') }
    }
}

// Helper functions
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.max_cpus as int)
        } catch (all) {
            return obj
        }
    }
}
